package com.spoony.spoony_server.application.service.user;

import com.spoony.spoony_server.adapter.dto.post.RegionDTO;
import com.spoony.spoony_server.adapter.dto.user.*;
import com.spoony.spoony_server.adapter.out.persistence.block.db.BlockStatus;
import com.spoony.spoony_server.application.port.command.user.*;
import com.spoony.spoony_server.application.port.in.user.BlockCheckUseCase;
import com.spoony.spoony_server.application.port.in.user.BlockUserCreateUseCase;
import com.spoony.spoony_server.application.port.in.user.BlockedUserGetUseCase;
import com.spoony.spoony_server.application.port.in.user.*;
import com.spoony.spoony_server.application.port.out.user.BlockPort;
import com.spoony.spoony_server.application.port.out.post.PostPort;
import com.spoony.spoony_server.application.port.out.user.UserPort;
import com.spoony.spoony_server.domain.user.Block;
import com.spoony.spoony_server.domain.user.Follow;
import com.spoony.spoony_server.domain.user.User;
import com.spoony.spoony_server.global.exception.BusinessException;
import com.spoony.spoony_server.global.message.business.UserErrorMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
@RequiredArgsConstructor
public class UserService implements
        UserGetUseCase,
        UserFollowUseCase,
        UserUpdateUseCase,
        UserSearchUseCase,
        RegionGetUseCase,
        BlockUserCreateUseCase,
        BlockCheckUseCase,
        BlockedUserGetUseCase {

    private final UserPort userPort;
    private final PostPort postPort;
    private final BlockPort blockPort;

    @Override
    public UserResponseDTO getUserInfo(UserGetCommand userGetCommand, UserFollowCommand userFollowCommand) {
        User user = userPort.findUserById(userGetCommand.getUserId());
        Long followerCount = userPort.countFollowerByUserId(user.getUserId());
        Long followingCount = userPort.countFollowingByUserId(user.getUserId());
        Long reviewCount = postPort.countPostsByUserId(userGetCommand.getUserId());

        // üî• Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ Ïú†Ï†ÄÎ•º ÌåîÎ°úÏö∞ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
        boolean isFollowing = false;
        if (userFollowCommand != null) {
            isFollowing = userPort.existsFollowRelation(
                    userFollowCommand.getUserId(),
                    userFollowCommand.getTargetUserId()
            );
        }

        String regionName = user.getRegion() != null ? user.getRegion().getRegionName() : null;

        return UserResponseDTO.from(
                user.getUserId(),
                user.getPlatform(),
                user.getPlatformId(),
                user.getUserName(),
                regionName,
                user.getIntroduction(),
                user.getCreatedAt(),
                user.getUpdatedAt(),
                followerCount,
                followingCount,
                isFollowing,
                reviewCount,
                user.getImageLevel().intValue()
        );
    }

    @Override
    public UserProfileUpdateResponseDTO getUserProfileInfo(UserGetCommand command) {
        User user = userPort.findUserById(command.getUserId());
        return new UserProfileUpdateResponseDTO(
                user.getUserName(),
                user.getRegion().getRegionName(),
                user.getIntroduction(),
                user.getBirth(),
                user.getImageLevel()

        );
    }

    @Override
    public List<UserSimpleResponseDTO> getUserSimpleInfo(UserGetCommand command) {
        return null;
    }

    @Override
    public List<UserSimpleResponseDTO> getUserSimpleInfoBySearch(UserSearchCommand command) {
        return List.of();
    }

    @Override
    public Boolean isUsernameDuplicate(UserNameCheckCommand command) {
        return userPort.existsByUserName(command.getUsername());
    }

    @Override
    public UserSearchHistoryResponseDTO getUserSearchHistory(UserGetCommand command) {
        return null;
    }

    @Override
    public FollowListResponseDTO getFollowers(UserGetCommand command) {
        List<Follow> followers = userPort.findFollowersByUserId(command.getUserId());

        List<UserSimpleResponseDTO> userDTOList = followers.stream().map(follow -> {
            User followerUser = follow.getFollower();
            boolean isFollowing = userPort.existsFollowRelation(command.getUserId(), followerUser.getUserId());

            return UserSimpleResponseDTO.from(
                    followerUser.getUserId(),
                    followerUser.getUserName(),
                    followerUser.getRegion().getRegionName(),
                    isFollowing,
                    followerUser.getImageLevel().intValue()
            );
        }).toList();
        return new FollowListResponseDTO(userDTOList.size(), userDTOList);
    }

    @Override
    public FollowListResponseDTO getFollowings(UserGetCommand command) {
        List<Follow> followings = userPort.findFollowingsByUserId(command.getUserId());

        List<UserSimpleResponseDTO> userDTOList = followings.stream().map(follow -> {
            User followingUser = follow.getFollowing();
            boolean isFollowing = userPort.existsFollowRelation(command.getUserId(), followingUser.getUserId());

            return UserSimpleResponseDTO.from(
                    followingUser.getUserId(),
                    followingUser.getUserName(),
                    followingUser.getRegion().getRegionName(),
                    isFollowing,
                    followingUser.getImageLevel().intValue()
            );

        }).toList();
        return new FollowListResponseDTO(userDTOList.size(), userDTOList);
    }

    @Override
    public BlockListResponseDTO getBlockings(UserGetCommand command) {
        List<Block> blockeds = userPort.findBlockedByUserId(command.getUserId());
        List<UserSimpleResponseDTO> userDTOList = blockeds.stream().map(block ->{
            User blockedUser = block.getBlocked();
            boolean isBlocked = blockPort.existsBlockUserRelation(command.getUserId(), blockedUser.getUserId());

            return UserSimpleResponseDTO.from(
                    blockedUser.getUserId(),
                    blockedUser.getUserName(),
                    blockedUser.getRegion().getRegionName(),
                    isBlocked,
                    blockedUser.getImageLevel().intValue()
            );
        }).toList();
            return new BlockListResponseDTO(userDTOList);
    }

    @Override
    public void createFollow(UserFollowCommand command) {
        Long userId = command.getUserId();
        Long targetUserId = command.getTargetUserId();
        // 1. Ïù¥ÎØ∏ ÌåîÎ°úÏö∞ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
        if (userPort.existsFollowRelation(userId, targetUserId)) {
            throw new BusinessException(UserErrorMessage.ALEADY_FOLLOW);
        }

        Optional<BlockStatus> blockStatus = blockPort.getBlockRelationStatus(userId,targetUserId);


        //Ïñ¥Ï∞®Ìîº ÏïÑÎûò Ï°∞Í±¥Î¨∏Ïóê ÎèÑÎã¨ÌïòÏßÄÏ°∞Ï∞® ÏïäÏùÑÌÖåÏßÄÎßå(ÌÅ¥Îùº Î∑∞ÏóêÏÑú ÎßâÌòÄÏÑú) Í∑∏ÎûòÎèÑ ÏùºÎã® Ï∂îÍ∞Ä
        if (blockStatus.isPresent() && blockStatus.get() == BlockStatus.BLOCKED) {
            throw new BusinessException(UserErrorMessage.USER_BLOCKED);
        }

        //Ïñ∏ÌåîÎ°úÏö∞->ÌåîÎ°úÏö∞Ïù∏ÏßÄ or Ïã†Í∑ú ÌåîÎ°úÏö∞Ïù∏ÏßÄÏóê Îî∞Îùº Î∂ÑÍ∏∞Ï≤òÎ¶¨
        if (blockStatus.isPresent() && blockStatus.get() == BlockStatus.UNFOLLOWED){ //Ïñ∏ÌåîÎ°úÏö∞->ÌåîÎ°úÏö∞
            blockPort.deleteUserBlockRelation(userId,targetUserId,BlockStatus.UNFOLLOWED); //block ÌÖåÏù¥Î∏îÏóêÏÑú ÏÇ≠Ï†ú
            userPort.saveFollowRelation(userId,targetUserId);

            //+ feed ÏóÖÎç∞Ïù¥Ìä∏ÎèÑ ÎàÑÎùΩÎêúÍ≤å ÏûàÎäîÏßÄ ÌôïÏù∏Ìï¥ÏïºÌï®


        } else{  //Ïã†Í∑ú ÌåîÎ°úÏö∞
            userPort.saveNewFollowRelation(userId, targetUserId);
            userPort.saveFollowRelation(userId, targetUserId);

        }

    }

    @Override
    public void deleteFollow(UserFollowCommand command) {
        Long userId = command.getUserId();
        Long targetUserId = command.getTargetUserId();

        // 1. block ÌÖåÏù¥Î∏îÏóê Ï†ÄÏû• (ÏÉÅÌÉú: UNFOLLOWED)
        blockPort.saveUserBlockRelation(userId, targetUserId, BlockStatus.UNFOLLOWED);

        // 2. follow Í¥ÄÍ≥Ñ Ï†úÍ±∞ (ÏñëÎ∞©Ìñ•)
        userPort.deleteFollowRelation(userId, targetUserId);
        userPort.deleteFollowRelation(targetUserId, userId);
    }

    @Override
    public void updateUserProfile(UserUpdateCommand command) {
        userPort.updateUser(command.getUserId(), command.getUserName(), command.getRegionId(), command.getIntroduction(), command.getBirth(), command.getImageLevel());
    }

    @Override
    public UserSearchResultListDTO searchUsersByQuery(UserGetCommand command, UserSearchCommand searchCommand) {

        List<Long> blockedUserIds = blockPort.getBlockedUserIds(command.getUserId());
        List<User> userList = userPort.findByUserNameContaining(searchCommand.getQuery());

        List<UserSearchResultDTO> userSearchResultList = userList.stream()
                .filter(user -> !blockedUserIds.contains(user.getUserId())) // Ï∞®Îã®Îêú ÏÇ¨Ïö©Ïûê Ï†úÏô∏
                .map(user -> {

                    // UserSearchResultDTOÎ•º Î∞òÌôò
                    return UserSearchResultDTO.from(
                            user.getUserId(),
                            user.getUserName(),
                            user.getRegion().getRegionName(),
                            user.getImageLevel().intValue() // Ï∂îÍ∞ÄÎêú profileImageUrl
                    );
                })
                .collect(Collectors.toList()); // Î¶¨Ïä§Ìä∏Î°ú ÏàòÏßë

        // UserSearchResultListDTOÎ°ú Î∞òÌôò
        return new UserSearchResultListDTO(userSearchResultList);
    }

    @Transactional
    @Override
    public RegionListDTO getRegionList() {
        List<RegionDTO> regionList = userPort.findAllRegions().stream()
                .map(region -> new RegionDTO(region.getRegionId(), region.getRegionName()))
                .toList();

        return new RegionListDTO(regionList);
    }

    @Override
    public void createUserBlock(BlockUserCommand command) {
        Long userId = command.getUserId();
        Long targetUserId = command.getTargetUserId();

        blockPort.saveOrUpdateUserBlockRelation(userId, targetUserId, BlockStatus.BLOCKED);

        // 2. follow Í¥ÄÍ≥Ñ Ï†úÍ±∞ (ÏñëÎ∞©Ìñ•)
        userPort.deleteFollowRelation(userId, targetUserId);
        userPort.deleteFollowRelation(targetUserId, userId);



    }

    @Override
    public void deleteUserBlock(BlockUserCommand command) {
        Long userId = command.getUserId();
        Long targetUserId = command.getTargetUserId();

        Optional<BlockStatus> blockStatus = blockPort.getBlockRelationStatus(userId, targetUserId);

        // BlockStatusÍ∞Ä BLOCKEDÏùº Í≤ΩÏö∞ UNFOLLOWEDÎ°ú ÏÉÅÌÉú Î≥ÄÍ≤Ω
        if (blockStatus.get() == BlockStatus.BLOCKED) {
            blockPort.updateUserBlockRelation(userId, targetUserId, BlockStatus.UNFOLLOWED);
        } else {
            // ÏÉÅÌÉúÍ∞Ä Ïù¥ÎØ∏ UNFOLLOWEDÎùºÎ©¥ ÏïÑÎ¨¥ ÎèôÏûëÎèÑ ÌïòÏßÄ ÏïäÏùå
            throw new BusinessException(UserErrorMessage.USER_NOT_FOUND);
        }
    }

    @Override
    public boolean isBlocked(BlockCheckCommand command) {
        return blockPort.existsBlockUserRelation(command.getUserId(), command.getTargetUserId());
    }

    @Override
    public List<Long> searchUsersByQuery(UserGetCommand command) {
        return blockPort.getBlockedUserIds(command.getUserId());
    }
}

