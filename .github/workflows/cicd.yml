deploy:
  needs: build
  runs-on: ubuntu-latest
  steps:
    - name: Install SSH Client
      run: sudo apt-get update && sudo apt-get install -y openssh-client

    - name: Create SSH Key File
      run: |
        if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
          echo "${{ secrets.DEV_EC2_SSH_KEY }}" > ssh_key.pem
          echo "${{ secrets.DEV_EC2_PUBLIC_IP }}" > ec2_public_ip.txt
        else
          echo "${{ secrets.PROD_EC2_SSH_KEY }}" > ssh_key.pem
          echo "${{ secrets.PROD_EC2_PUBLIC_IP }}" > ec2_public_ip.txt
        fi
        chmod 600 ssh_key.pem

    - name: SSH into EC2 and Deploy
      run: |
        EC2_PUBLIC_IP=$(cat ec2_public_ip.txt)

        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
        #!/bin/bash

        echo "🌐 Docker 네트워크 존재 여부 확인"
        if ! sudo docker network inspect spoony-network > /dev/null 2>&1; then
          echo "➕ 네트워크 spoony-network 생성"
          sudo docker network create spoony-network
        else
          echo "✅ 네트워크 spoony-network 이미 존재"
        fi

        echo "🧠 Redis 컨테이너가 실행 중인지 확인"
        if [ "\$(sudo docker ps -q -f name=redis)" ]; then
          echo "🔗 Redis 컨테이너를 spoony-network에 연결"
          sudo docker network connect spoony-network redis || true
        else
          echo "🚀 Redis 컨테이너 실행 (spoony-network 포함)"
          sudo docker run -d --name redis --network spoony-network redis
        fi

        echo "🔍 현재 실행 중인 포트 확인"
        ACTIVE_PORT=\$(sudo docker ps --format "{{.Ports}}" | grep -oE '0.0.0.0:808[12]' | cut -d':' -f2 | cut -d'-' -f1)

        if [[ -z "\$ACTIVE_PORT" ]]; then
          echo "⚠️ 현재 실행 중인 포트를 찾을 수 없습니다. 기본값(8081)으로 설정합니다."
          ACTIVE_PORT="8081"
        fi

        if [[ "\$ACTIVE_PORT" == "8081" ]]; then
          NEW_PORT="8082"
        else
          NEW_PORT="8081"
        fi
        echo "🔄 새로운 컨테이너를 \$NEW_PORT 포트에서 실행"

        echo "🚀 최신 이미지 가져오기"
        sudo docker pull yh0872/spoony-dev:latest

        echo "🔧 새로운 컨테이너 실행 (spoony-network 포함)"
        sudo docker run -d -p \$NEW_PORT:8080 \
          --name spoony-dev-\$NEW_PORT \
          --network spoony-network \
          yh0872/spoony-dev

        echo "⌛️ 컨테이너 실행 대기 (30 sec)"
        sleep 30

        echo "🔁 Nginx 트래픽 대기 (10 sec)..."
        sleep 10

        echo "🔁 Nginx 설정 적용"
        sudo nginx -t && sudo nginx -s reload

        echo "🗑️ 이전 컨테이너 제거"
        sudo docker stop spoony-dev-\$ACTIVE_PORT
        sudo docker rm spoony-dev-\$ACTIVE_PORT

        echo "✅ 배포 완료. 현재 활성 컨테이너: spoony-dev-\$NEW_PORT"
        EOF
