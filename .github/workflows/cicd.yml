name: CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment (dev or prod)'
        required: true
        default: 'dev'
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.CD_APPLICATION }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml

      - name: Generate application-aws.yml
        run: |
          echo "${{ secrets.CD_APPLICATION_AWS }}" > ./src/main/resources/application-aws.yml
          cat ./src/main/resources/application-aws.yml

      - name: Generate application-naver.yml
        run: |
          echo "${{ secrets.CD_APPLICATION_NAVER }}" > ./src/main/resources/application-naver.yml
          cat ./src/main/resources/application-naver.yml

      - name: Generate application-oath.yml
        run: |
          echo "${{ secrets.CD_APPLICATION_OATH }}" > ./src/main/resources/application-oath.yml
          cat ./src/main/resources/application-oath.yml

      - name: Build Project
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t yh0872/spoony-${{ github.event.inputs.environment }} .

      - name: Publish Image to Docker Hub
        run: docker push yh0872/spoony-${{ github.event.inputs.environment }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Create SSH Key File
        run: |
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "${{ secrets.PROD_EC2_SSH_KEY }}" > ssh_key.pem
            EC2_HOST="${{ secrets.PROD_EC2_PUBLIC_IP }}"
            IMAGE_NAME="yh0872/spoony-prod"
          else
            echo "${{ secrets.DEV_EC2_SSH_KEY }}" > ssh_key.pem
            EC2_HOST="${{ secrets.DEV_EC2_PUBLIC_IP }}"
            IMAGE_NAME="yh0872/spoony-dev"
          fi
          chmod 600 ssh_key.pem

      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${EC2_HOST} << 'EOF'
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull $IMAGE_NAME:latest
          sudo docker rm -f spoony-container || true
          sudo docker run -d -p 8080:8080 --name spoony-container $IMAGE_NAME
          EOF
