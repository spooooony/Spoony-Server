name: CI/CD

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      environment:
        description: 'Environment to deploy (dev or prod)'
        required: true
        default: 'dev'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.CD_APPLICATION }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml

      - name: Generate environment-specific yml files
        if: ${{ github.event.inputs.environment == 'prod' }}
        run: |
          echo "${{ secrets.CD_APPLICATION_AWS }}" > ./src/main/resources/application-aws.yml
          echo "${{ secrets.CD_APPLICATION_NAVER }}" > ./src/main/resources/application-naver.yml
          echo "${{ secrets.CD_APPLICATION_OATH }}" > ./src/main/resources/application-oath.yml

      - name: Build Project
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            docker build -t yh0872/sopt_collaboration .
          else
            docker build -t yh0872/spoony-dev:latest .
          fi

      - name: Publish Image to Docker Hub
        run: |
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            docker push yh0872/sopt_collaboration:latest
          else
            docker push yh0872/spoony-dev:latest
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Create SSH Key File
        run: |
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
          echo "${{ secrets.DEV_EC2_SSH_KEY }}" > ssh_key.pem
          echo "${{ secrets.DEV_EC2_PUBLIC_IP }}" > ec2_public_ip.txt
          else
          echo "${{ secrets.PROD_EC2_SSH_KEY }}" > ssh_key.pem
          echo "${{ secrets.PROD_EC2_PUBLIC_IP }}" > ec2_public_ip.txt
          fi
          chmod 600 ssh_key.pem

      - name: SSH into EC2 and Deploy
        run: |
          EC2_PUBLIC_IP=$(cat ec2_public_ip.txt)    
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_PUBLIC_IP << EOF
          #!/bin/bash

      - name: SSH into EC2 and Deploy
        run: |
          EC2_PUBLIC_IP=$(cat ec2_public_ip.txt)

          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
          
          echo "🌐 Docker 네트워크 존재 여부 확인"
          if ! sudo docker network inspect spoony-network > /dev/null 2>&1; then
            sudo docker network create spoony-network
          fi

          REDIS_EXISTS=$(sudo docker ps -a -q -f name=^redis$)
          REDIS_RUNNING=$(sudo docker ps -q -f name=^redis$)

          if [ -n "$REDIS_EXISTS" ]; then
            if [ -n "$REDIS_RUNNING" ]; then
              sudo docker network connect spoony-network redis || true
            else
              sudo docker start redis
              sudo docker network connect spoony-network redis || true
            fi
          else
            sudo docker run -d --name redis --network spoony-network redis
          fi

          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            sudo docker pull yh0872/sopt_collaboration:latest
            sudo docker rm -f sopt-collaboration-container || true
            sudo docker run -d -p 8080:8080 \
              --name sopt-collaboration-container \
              --network spoony-network \
              yh0872/sopt_collaboration

            sudo docker image prune -af
            sudo docker container prune -f
            sudo docker volume prune -f

          else
            ACTIVE_PORT=\$(sudo docker ps --format "{{.Ports}}" | grep -oE '0.0.0.0:808[12]' | cut -d':' -f2 | cut -d'-' -f1)
            if [[ -z "\$ACTIVE_PORT" ]]; then ACTIVE_PORT="8081"; fi
            if [[ "\$ACTIVE_PORT" == "8081" ]]; then NEW_PORT="8082"; else NEW_PORT="8081"; fi

            sudo docker pull yh0872/spoony-dev:latest
            sudo docker run -d -p \$NEW_PORT:8080 \
              --name spoony-dev-\$NEW_PORT \
              --network spoony-network \
              yh0872/spoony-dev:latest

            sleep 30

            sudo sed -i "s/127.0.0.1:808[12]/127.0.0.1:\$NEW_PORT/" /etc/nginx/sites-available/default
            sudo nginx -t && sudo nginx -s reload

            sudo docker stop spoony-dev-\$ACTIVE_PORT
            sudo docker rm spoony-dev-\$ACTIVE_PORT

            sudo docker image prune -af
            sudo docker container prune -f
            sudo docker volume prune -f
          fi
          EOF
